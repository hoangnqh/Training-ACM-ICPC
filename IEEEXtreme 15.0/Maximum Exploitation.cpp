#include<bits/stdc++.h>
using namespace std;

#define int long long

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define ld long double

typedef pair<int, int> II;
typedef pair<int, II> III;

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

const int INF = 1e18;
const int MOD = 1e9 + 7;
const int N = 1e3 + 5;

int a[N][N];
int s[2][N][N];

int td[2][N], dt[2][N], tp[2][N], pt[2][N];

int r, c;
int X, Y;

int sum(int i1, int j1, int i2, int j2){
    if(i2 > r || j2 > c) return 0;
    return a[i2][j2] - a[i1 - 1][j2] - a[i2][j1 - 1] + a[i1 - 1][j1 - 1];
}

void solve(){
    cin >> r >> c;
    int _x, _y;
    cin >> _x >> _y;
    X = min(_x, _y);
    Y = max(_x, _y);
    for(int i = 1; i <= r; i++){
        for(int j = 1; j <= c; j++){
            cin >> a[i][j];
            a[i][j] += a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];
        }
    }

    //cout << a[r][c] << endl;

    //cout << sum(1, 1, 3, 2) << endl;

    for(int i = 1; i <= r; i++){
        for(int j = 1; j <= c; j++){
            s[0][i][j] = sum(i, j, i + X - 1, j + Y - 1);
            s[1][i][j] = sum(i, j, i + Y - 1, j + X - 1);
            //cout << s[0][i][j] << " " << s[1][i][j] << endl;
        }
    }
    /// top down
    for(int i = 1; i <= r; i++){
        td[0][i] = 0, td[1][i] = 0;
        for(int j = 1; j <= c; j++){
            td[0][i] = max(td[0][i], s[0][i][j]);
            td[1][i] = max(td[1][i], s[1][i][j]);
        }
        td[0][i] = max(td[0][i], td[0][i - 1]);
        td[1][i] = max(td[1][i], td[1][i - 1]);
        //cout << td[0][i] << " " << td[1][i] << endl;
    }

    /// down top
    for(int i = r; i >= 1; i--){
        dt[0][i] = 0, dt[1][i] = 0;
        for(int j = 1; j <= c; j++){
            dt[0][i] = max(dt[0][i], s[0][i][j]);
            dt[1][i] = max(dt[1][i], s[1][i][j]);
        }
        dt[0][i] = max(dt[0][i], dt[0][i + 1]);
        dt[1][i] = max(dt[1][i], dt[1][i + 1]);
    }

    /// left right
    for(int j = 1; j <= c; j++){
        tp[0][j] = 0, tp[1][j] = 0;
        for(int i = 1; i <= r; i++){
            tp[0][j] = max(tp[0][j], s[0][i][j]);
            tp[1][j] = max(tp[1][j], s[1][i][j]);
        }
        tp[0][j] = max(tp[0][j], tp[0][j - 1]);
        tp[1][j] = max(tp[1][j], tp[1][j - 1]);
    }

    /// right left
    for(int j = c; j >= 1; j--){
        pt[0][j] = 0, pt[1][j] = 0;
        for(int i = 1; i <= r; i++){
            pt[0][j] = max(pt[0][j], s[0][i][j]);
            pt[1][j] = max(pt[1][j], s[1][i][j]);
        }
        pt[0][j] = max(pt[0][j], pt[0][j + 1]);
        pt[1][j] = max(pt[1][j], pt[1][j + 1]);
    }

    //cout << td[0][4] << endl;

    //cout << td[0][r] << " " << dt[0][1] << " " << tp[0][c] << " " << pt[0][1] << endl;
    int res = 0;

    for(int i = 1; i <= r; i++){
        for(int j = 1; j <= c; j++){
            int i1, j1;

            /// s[0]
            int i2 = i + X - 1, j2 = j + Y - 1;
            int val1 = s[0][i][j];

            i1 = i - X + 1, j1 = j - Y + 1;
            i1 = max(1LL, i1), j1 = max(1LL, j1);
            int val2 = max(td[0][i1 - 1], max(dt[0][i2 + 1], max(tp[0][j1 - 1], pt[0][j2 + 1])));
            res = max(res, val1 + val2);

            i1 = i - Y + 1, j1 = j - X + 1;
            i1 = max(1LL, i1), j1 = max(1LL, j1);
            int val3 = max(td[1][i1 - 1], max(dt[1][i2 + 1], max(tp[1][j1 - 1], pt[1][j2 + 1])));
            res = max(res, val1 + val3);

            /// s[1]
            i2 = i + Y - 1, j2 = j + X - 1;
            val1 = s[1][i][j];

            i1 = i - X + 1, j1 = j - Y + 1;
            i1 = max(1LL, i1), j1 = max(1LL, j1);
            val2 = max(td[0][i1 - 1], max(dt[0][i2 + 1], max(tp[0][j1 - 1], pt[0][j2 + 1])));
            res = max(res, val1 + val2);

            i1 = i - Y + 1, j1 = j - X + 1;
            i1 = max(1LL, i1), j1 = max(1LL, j1);

            //cout << i1 << " " << j1 << " " << i2 << " " << j2 << endl;
            //cout << td[1][i1 - 1] << " " << dt[1][i2 + 1] << " " << pt[1][1]
            val3 = max(td[1][i1 - 1], max(dt[1][i2 + 1], max(tp[1][j1 - 1], pt[1][j2 + 1])));
            res = max(res, val1 + val3);
//            cout << res << endl;
//            return;
        }
    }
    cout << res;
}

int32_t main(){
    ios_base::sync_with_stdio(0); cin.tie(0);
    //int T; cin >> T; while(T--)
    solve();
}
